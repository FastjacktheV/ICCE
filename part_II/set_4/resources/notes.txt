Recap
    + base class pointer may point to derived class object
    + the pointer type determines function available

    two fundamental relations
        * implemented in terms of base          // usually composition
        * is-a base                             // polymorphism

    Liskov Substitution principle (LSP)
        "Derived object may be passed to code expecting base pointer"
        Par example: passing ostringstream or ofstream to function
        that expects ostream objects.
        * implemented using polymorphism
            using derived members trough base ptr

    polymorphism
        * late binding:
                decide run-time which function to use 
                default c++ behavior is 'static binding'

    example
        #include <iostream>
        using namespace std;    
        
        class Base
        {
            protected:
                void hello()
                { 
                    cout << "base hello\n";
                }
            public:
                void process()
                {
                    hello();
                }
        };
        class Derived: public base
        {
            protected:
                void hello()
                { 
                    cout << "derived hello\n";
                }
        };
        int main()
        {
            Derived derived;
            derived.process();
        }
        
    essence of lsp:
        public inheritance should not be used to reuse the base class members

    14.1 VIRTUAL functions
    
    keyword 'virtual'
        * activate late binding
        * only in base class def
   
    vehicle example
        * goal: design user interface of base class such that it remains 
            usable of what derived class we are in. 
        * software designed for base now works for all derived
        * reusability is enhanced by 'redefinable interface'
            - derived classes fill own implementation
            - interface still works like in base
            - reusable members should be private
                "conceptually belong to own class"
            - reuable members should be virtual in the base class

        class Vehicle
        {
            public:
                size_t masss() const;
                size_t si_mass() const;
            private:
                virtual size_t vmass() const;
        };
        
    * seperate user interface from redefinable interface
        + allows fine-tuning user interface at 1 point of maintenaince
        + dont change expected behaviour of the common redefinable interface

    for this reason: add another accessor to Vehicle:

    size_t Vehicle::si_mass() const
    {
        return vmass();
    }

    
    effect of late binding (polymorphism)
    
    void showInfo(Vehicle &vehicle)
    {
        cout << "Info: " << vehicle << '\n';
    }
    
    int main()
    {
        Car car(1200);      // car mass 1200
        Truck truck(6000, 115, "Scania", 15000); // cabin mass 600, speed 115
        
    
        showInfo(car);
        showInfo(truck); 

        Vehicle *vp = &truck;
        cout << vp -> speed() << '\n'; 
    }

    NOTE: the virtual keyword does not change which attributes are actually 
    available to the caller; private is still private.


    14.2 VIRTUAL DESTRUCTORS

    example
        Vehicle *vp = new Land{100, 120};
        delete vp;          // object destroyed
    what happens? the base class destructor is called. bad news!
    
    virtual destructors
        + always declare destructor virtual in base
        + if nothing is done in derived class,  
            declare an empty destructor
        + do not redefine in-line.


14.3 PURE VIRTUAL FUNCTIONS

    @ Virtual members don't have to be implemented in base classes
    @ Derived classes are REQUIRED to implement them
        "obey the protocol"
    @ aka "abstract base classes" or "abstract classes"
    @ postfix = 0 to create such 'pure virtual members'
    
        #include <iosfwd>
        class Base
        {
            public:
                virtual ~Base();
                virtual std::ostream &insertInto(std::ostream &out) const = 0;          
        };

        inline std::ostream &operator<<(std::ostream &out, Base const &base)
        {
            return base.insertInto(out);
        }
    
    in this example:
        @ all classes derived from Base must implement insertInto.

    
    
    14.3.1 IMPLEMENTING PURE VIRTUAL FUNCTIONS

        don't do it

    14.4 EXPLICIT VIRTUAL OVERRIDES

    * final
        class Base1 final {}; // this base class can not be a base class
        
    * override - use to give the compiler info!
    
    14.5 VIRTUAL FUNCTIONS AND MULTIPLE INHERITANCE

    problems.

    14.5.1 Ambiguity in multiple inheritance

    AirCar is Land is Vehicle
    AirCar is Air  is Vehicle
    
    * which vehicle data are we accessing?

        AirCar jBond;
        cout << jBond.mass() << '\n';
        
        // this won't compile  

    * solution 1:
        @ use scope resolution operator
        @ cout << jBond.Car::mass() << '\n';
        
        // ugly because it forces the user to think

    * solution  2:
        @ dedicated mass for AirCar:
            int AirCar::mass() const
            {
                return Car::mass();
            }

        // this is better, but we can do even better 
    
    14.5.2 Virtual base classes

    * solution 3:
        @ define the base class as virtual
        
        class Land: virtual public Vehicle
        {
            // etc
        };
        class Car: public Land
        {
            // etc
        };
        Class Air: virtual public Vehicle
        {
            // etc
        };
        class AirCar: public Car, public Air
        {
        };
            
        @ now Vehicle is added only once
        @ inheritance of the virtual class is no longer dependent on
        @ the 'route'
        
    * When Third inherits from Second which inherits from First, then the
      First constructor called by the Second constructor called by the Third
      constructor. 

    class First
    {
        public:
            First(int x);               // constructor
    }
    class Second: public First
    {
        public:
            Second(int x)               // inline constructor
                :
                    First(x)
            {}
    }; 
    class Third: public Second
    {
        public:
            Third(int x)
            :
                Second(x)               // inline construtor, calls 
            {}
    };

    * when using virtual decleration, this is no longer true
    * Second now calls First default constructor!
    * it is possible to overrule this behaviour
    * just construct first explicitly
    
    class Third: public Second
    {
        public:
            Third(int x)
            :
                Frist(x),
                Second(x)
             IRandStream's class interface should therefore start like this:

    class IRandStream: private Randbuffer, public std::istream
    {
        public:
            IRandStream(int lowest, int highest)    // defines the range
            :
                Randbuffer(lowest, highest),
                std::istream(this)                  // passes &Randbuffer
            {}
        ...{}
    };
    
    14.5.3 When virtual derivation is BAD

    * sometimes

    14.6 run-type ident

        * usually types are ident compile time
        * but run-time is possible (but limited)
        * dynamic_cast
                convert a base class pointer or ref to derived class pointer
                or ref. "down-casting"
        * operator 'typeid' returns the type of an expression
        * these can be used with objects of classes with at least 1 virtual 
          member func

    14.6.1 dynamic_cast
        
        @ example
        
        class Base
        {
            public:
                virtual ~Base();
        };
        class Derived: public Base
        {
            public:
                char const *toString();
        };
        inline char const *Derived::toString()
        {
            return "Derived object";
        }
        int main()
        {
            Base *bp;
            Derived *dp;    
            Derived d;

            bp + &d;

            dp = dynamic_cast<Derived *>(bp);
        
            if (dp)
                cout << dp->toString() << '\n';
            else
                cout << "dynamic cast conversion failed\n";
        }
        
        * note the succes check at runtime 
        * casting only works if the correct derived class is used
        * this can used to check what derived class an object is
        * when given a pointer, dynamic_cast retuns 0            if failed
        *              ref,                  throws an exception if failed
   
    
        when to dynamic_cast?
           
            * when base can't be modifed but derived can be modifed
            
        dynamic vs static cast
           
            * static cast does no real type checking
    
    14.6.2 'typeid' operator
        
        * use only with base that have virtual members

        @ example

        class Base;         // with virtual funcs
        class Derived: public Base;

        base *bp = new Derived;         
    
        if (typeid(bp) == typeid(Derived *)) // false
            ... 
        if (typeid(bp) == typeid(Base *))       // 2: true
            ...
        if (typeid(bp) == typeid(Derived))      // 3: false
            ...
        if (typeid(bp) == typeid(Base))         // 4: false
            ...
        if (typeid(*bp) == typeid(Derived))     // 5: true
            ...
        if (typeid(*bp) == typeid(Base))        // 6: false
            ...

        Base &br = *bp;

        if (typeid(br) == typeid(Derived))      // 7: true
            ...
        if (typeid(br) == typeid(Base))         // 8: false
            ...

    14.7 Inheritance: when to use to achieve what?

        * not thoughtlessly
        * prefer composition
        * select public, private, protected - think
        * good: "one member one task"
        * specific: class member should be member of class public or protected
          interface OR it should virtual to be implemented later.
        * Liskov Substitution Principle: Derived should be usable in code
          designed for Base.
        
        @ example : competition between inheritance and composition
        
        class Dirived: public Base
        { ... };
        
        class Composed
        {
            Base d_base;
            ...
        };
        
        * assume: implemented in terms of (or there would be no composition)
        * assume: composed does not make Base interface available;
                  => neither should Composed.
                  ( use private inheritance when implementing in terms of )
        * arguments inheritance vs composition
            + prefer composition because it's looser
            + composition allows multiple members of the same type
                ( for example std::string objects )
            + composition allows seperation of interface from implementation 
                ( bridge design pattern / compiler firewall / pimpl )
            - if Base offers protected members that we need, we have to use
              (private) inheritance. 
            @ protected inheritance may be considered if
                * derived class intended as base class that should only make
                  members of its own base class available to classes that are
                  derived from it.
       
        * private should be used when derived is-a base. 
        * but: in order to initialize base another class obj is needed:
            @ example : Irandstream: private istream
                * istream can be constructed empty, but needs a streambuf 
                  at some point.
                * if RandBuffer: public std::streambuf exists,
                  IRandStream can be derived from RandBuffer and std::istream
                * RandStream is NOT a Randbuffer, public inheritance is not 
                  apropriate!
                * IRandStream is implemented in terms of RandBuffer
                    => use private inheritance.
                * code
                
                class IRandStream: private Randbuffer, public std::istream
                {
                    public:
                        IRandStream(int lowest, int highest)  // range
                        :   
                            Randbuffer(lowest, highest),
                            std::istream(this)           // passes &randbuffer
                        {}
                        ...
                };
                
                // note we construct IRandStream RandBuffer then pass that
                // same RandBuffer to istream constructor!
            
        * public inheritance reserved for LSP classes
            ( recall: substitution principle )
        
------> @ prototypical base class
    
        class Base
        {
            public:
                virtual ~base();
                void process();             // call virtual members
            private:                        // containing implementation
                virtual void v_process();
        }; 
            
        * alternatively: protected non-virtual destructor  
            @ why not public? prevent deleting objects trough their base class
              pointers. 
            @ why protected? to allow derived constructors to call base constr.
        
    14.8 STREAMBUF
        
        * interface between streams and devices
        * not directly constructed but used as base class for derived class
          which implements communication with the device
            
        Public members for input
        
        ...

        Public members for output

            int pubsync()   
                flush buffer to file
                * normally only used in derived classes
            int sputc(char c)
                insert c into streambuf object
                * if buffer full, call overflow to flush device
            int sputn(char const *buffer, std::streamsize n)
                insert at most n chars from buffer into streambuf
                * using xsputn ( protected )
            
        Public members, misc
            
            ios::pos_type pubseekoff(ios::off_type offset, ios::seekdir way,
                                    ios::openmode mode = ios::in | ios::out)
                 set offset for next character read/write 
            ios::pos_type pubseekpos(ios::pos_type offset, 
                                    ios::openmode mode = ios::in | ios::out)
                 set absolute pos of next char read/write
            streambuf *pubsetbuf(char * buffer, std::streamsize n)
                the streambuf object will use 'buffer', which may contain       
                at least n characters

                

        
         
