LECTURE NOTES SLIDES: ALLOCATION IN CLASSES
    example
        struct Entry;
        class Symtab
        {
            entry **d_entry;    
            size_t  d_size;
        };
    
    destructors recap
        * delete memory allocated & owned by obj
        * cleanup
            * close streams
            * derived classes       // future topic
        
    initialization of object example:
        void fun(Symtab const &outer)
        {
            Symtab inner{ outer };
            ...
        }
        * note we just created a new object with values from old object
        * structs and classes are copied MEMBER-WISE
        * the POINTER d_entry is copied; the copy points to the SAME ADRESS
        * destroying outer will make the pointer in inner WILD!

    the solution: COPY CONSTRUCTOR
        * always REQUIRED when objects allocate its own memory 
        * syntax
            ClassName::ClassName(ClassName const &other)
            :
                // member initializers if possible
            {
                // allocate mem
                // copy info stored in other
            }
        * example
            Symtab::Symtab(Symtab const &other)
            :
                d_entry(new Entry *[other.d_size]),
                d_size(other.d_size)
            {
                for (size_t idx = 0; idx != d_size; ++idx)
                    d_entry[idx] = new Entry(*other.d_entry[idx]);
            }
    DEFAULT copy constructor
        * copy simple data byte-wise (pointers too)
        * copy other data using their copy constructors
    
    copy constructor CALLS
        * value class parameter is used
            fun(SymTab thing)
        * value class return type is used
            SymTab fun(...)
            {
                SymTab bla;
                return bla;
            }
        * initializing object from existing object of same class (see above)

    compilers & the CC
        * compilers like to avoid CC: COPY ELISION

    
    Blunt assignment: bad (wild pointers)
        * lvalue object must allocate it own memory
        * OVERLOAD the ASSIGNMENT operator!
            Symtab &Symtab::operator=(Symtab const &rvalue)
            {
                deleteEntryObjects();       // what is behind the pointer
                delete[] d_entry;           // the pointer
            
                d_size = rvalue.d_size;             // how big?
                d_entry = new Entry * [d_size];     // welcome new space
                
                for (size_t idx = 0; idx != d_size; ++idx)          // copy
                    d_entry[idx] = new Entry(*rvalue.d_entry[idx]);

                return *this;                   // 
            }

    Intermezzo: THIS
        * pointer (adress of object calling member function)
        * always available in non-statics
        * type is 'Myclass *const this'
        * used for
            * returning ref to current object (return *this)
            * point to current obj when using pointers to members

    SUMMARY
       when a class has memory:
            + COPY CONSTRUCTOR
            + OVERLOADED ASSIGNMENT OPERATOR
            + DESTRUCTOR
        and optionally
            + move constructor
            + move assignment operator
            + swap member
   
    BUT: BEFORE implmenting overloaded assignment (destruct + copy)
    consider SWAPPING:
        - objects may swap member-wise IF no ref members
        - classes often provide swap members
        - simple but very fast:
        void Class::swap(Class &other)
        { 
            char bytes[sizeof(Class)];
            memcpy(bytes,   this,   sizeof(Class));
            memcpy(this,    &other, sizeof(Class));
            memcpu(&other,  bytes,  sizeof(Class));
        }
        - possible for members with/without reference members
        and dynamic allocationconst 
            # not for linked lists / self-pointing classes

    Class design PROTOTYPE
        class Symtab
        {
                // data
            public:
                Symtab(...);        // constructors
                Symtab(Symtab const &other);
                ~Symtab();
                Symtab &Operator=(Symtab const &other);
    
                void swap(Symtab &other);       // maybe
                // more members
            private:
                // YEAH PRIVATE MEMBERS 
        }
        
    Sometimes you can't define copy constructor
            PREVENT use:
            public:
                Symtab(Symtab const &other) = delete;
                Symtab &operator=(Symtab const &other) = delete; 
            PS could use =default
    
    RVALUE references &&ref
        * anonymous temporary values
        * may be modified (unlike Class const &)
        * 
            

C++ ANNOTATIONS: CHAPTER 9 (CLASSES AND MEMORY ALLOCATION)


GENERAL
    lvalue vs rvalues
        - every expression is either lvalue or rvalue
        rvalue &&
            - temps or objects that pretend to be temp
            - we can steal their resources
        lvalue &
            - not rvalues
        primordial example
            int dog = 5;
            dog is lvalue
            5 is rvalue
