// flexc++ defenition section
%x mlComment mlCommentSpace string

eolComment   "#".*

// flexc++ rules section
%%
// mlComment:
"/*"                        {  
// if comment starts without a space:
                                begin(StartCondition__::mlComment);
                                d_multiLine = false;
                            }
<mlComment>"*/"             {
// if comment also ends without space, continue as usual
                                if(d_multiLine)
                                {
                                    std::cout << '\n';
                                    begin(StartCondition__::INITIAL);
                                }
                                else
                                    begin(StartCondition__::INITIAL);
                            }
<mlComment>"*/ "            {
// if comment ends with a space, add this space only on the same row
                                if(d_multiLine)
                                {  // if starts on next row: no preceeding space
                                    std::cout << '\n';  
                                    begin(StartCondition__::INITIAL);
                                }
                                else
                                {
                                    std::cout << ' ';
                                    begin(StartCondition__::INITIAL);
                                }
                            }
<mlComment>.                // skip everything
<mlComment>"\n"             d_multiLine = true;

// mlCommentSpace:
" /*"                       {  
// if comment starts with a space the space will be eaten
                                begin(StartCondition__::mlCommentSpace);
                                d_multiLine = false;
                            }
<mlCommentSpace>"*/ "|"*/"  {
// if comment ends with or without a space these signs will be eaten
// and afterwards one space will be added, so always resulting in a single space
                                if(d_multiLine)
                                {
                                    std::cout << '\n';
                                    begin(StartCondition__::INITIAL);
                                }
                                else
                                {
                                    std::cout << ' ';
                                    begin(StartCondition__::INITIAL);
                                }
                            }

<mlCommentSpace>.           // skip everything
<mlCommentSpace>"\n"        d_multiLine = true;

// string:
"\""                        begin(StartCondition__::string);
<string>"\""                begin(StartCondition__::INITIAL);
<string>.                   std::cout << matched()[0];

// INITIAL:
{eolComment}                // skip everything
^[ \t\n]+                   // begin of line: skip white spaces

[ \t]+$                     // skip end of line whites

// bool d_multiLine is defined in Scanner.h
