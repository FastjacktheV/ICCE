// flexc++ defenition section
%x mlComment mlCommentSpace string

eolComment   "#".*

// flexc++ rules section
%%
// mlComment:
"/*"                        {  
                                begin(StartCondition__::mlComment);
                                d_multiLine = false;
                            }
<mlComment>"*/"             {
                                if (d_multiLine)
                                {
                                    std::cout << '\n';
                                    begin(StartCondition__::INITIAL);
                                }
                                else
                                    begin(StartCondition__::INITIAL);
                            }
<mlComment>"*/ "            {
                                if (d_multiLine)
                                {  // if starts on next row: no preceeding space
                                    std::cout << '\n';  
                                    begin(StartCondition__::INITIAL);
                                }
                                else
                                {
                                    std::cout << ' ';
                                    begin(StartCondition__::INITIAL);
                                }
                            }
<mlComment>.                // skip everything
<mlComment>"\n"             d_multiLine = true;

// string:
"\""                        begin(StartCondition__::string);
<string>"\""                begin(StartCondition__::INITIAL);
<string>.                   std::cout << matched()[0];
<string>"/*"                std::cout << matched()[0];

// INITIAL:
{eolComment}                // skip everything
^[ \t\n]+                   // begin of line: skip white spaces

[ \t]+$                     // skip end of line whites

