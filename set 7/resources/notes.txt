LECTURE SLIDES: BASIC IO
    - from C: isattay
    - don't use variadic functions

    - use streams
        - streams are classes (use stream objects)
        - operations decoupled from medium

    - hierarchy
        ios_base -> ios
                    |   \
                    |    \
                    v     v 
                 istream  ostream 
               /    |        |    \
             /      v        v     \
ifstringstream   ifstream ofstream   osstringstream
                    \       /
                     v     v
                     fstream
        istream: input
        osteram: output
        iostream: standard streams
        iosfwd: forward declarations

    - ostream defines insertion operator << for all primitive types and 
      std::string
    - istream         extraction         >>                  
    - istream and ostream use streambuf objects
    
    - all above are 'derivated classes'
        - wrappers
        - are their parent: ifstream is an istream 
        - additional functionality is just wrapping - never extend base class 
        - no surprises: everything in base still available
    
    - istringstream, ostringstream
        - derivated classes
        - ostringstream: convert to text
        - istringstream: convert from text

    - stream formatting
        - formatting members
        - manipulators
            often used: hex, dec, endl
        - parametrized manipulators (#include <iomanip>)
            often used: setprecision(x), setw(x)
            (un) setf() // set unset formatting flags
        
        - write your own manipulators
            std::ostream &nl(std::ostream &stream)
            {
                return stream << '\n';
            }
            use:
            cout << nl; 
    - unformatted I/O
        - no conversions
        - can be fixed, can combine in/out on single file
            x.read() x.write() to write bytes
            x.seek{g,p} x.tell{g,p} to set,  determine file position
        - drawbacks:
            - have to use reinterpret_cast
                double DStream::at(size_t idx) const
                {
                    d_in.seekg(idx * sizeof(double));
                    double ret;
                    d_in.read(reinterpret_cast<char *>(&ret), sizeof(double))
                    return ret
                }
            - read strings? How big is the string?
            - make an index section saving for each string
                - position
                - offset
 std::string SStream::at(size_t post) const
{
    d_in.seekg(pos * sizeof(size_t));
    d_in.read(reinterpret_cast<char *>(&pos), sizeof(size_t));
    size_t end;
    d_in.read(reinterpret_cast<char* >(&end) sizeof(size_t));
    d_in.seekg(pos);
    char buffer[end - pos];
    d_in.read(buffer, end - pos);

    return string(buffer, buffer + d_in.gcount());
}

    - clear if file fails           

K&R BOOK CHAPTER 8
    UNIX
        - everything is a file
    read/write
        - open file (inform system of intent)
        - create file or discard pervious contents (system permission check)
        - if succesful, system returns a 'file descriptor'
    when running in shell
        - 3 files (file descriptor 0,1,2)
            standard input 0
            standard output 1
            standard error 2
    Low level IO
        - use read, write system calls
        int n_read = read(int fd, char *buf int n)
        - returns bytes transferred
        - 0 means eof
        - -1 means error

    OOPS IT SAYS CHAPTER 7 NOT 8

K&R BOOK CHAPTER 7
    - blabla prinft blabla

C++ ANNOTATIONS VERSION 10.8.1 CHAPTER 6
    - all i/o in std::
    - forward declare iostream objects 
        class std::ostream      // BAD
        #include <iosfwd>       // GOOD
    - ios_base is.. the base.
    - ios derives from ios_base and is the base for everything else
        - implements communication with streambuf objects
        - streambuf does actual i/o
    - ostringstream (memory buf)
    - istringstream (memory buf)
     
 <iosfwd> forward declaration       
 <ios>: sources should include this header file when using types and facilitesi
 (like ios::off_type, see below) defined in the ios class.
<streambuf>: sources should include this header file when using streambuf or
 filebuf classes. See sections 14.8 and 14.8.2.
<istream>: sources should include this preprocessor directive when using the
 class istream or when using classes that do both input and output. 
See section 6.5.1.
<ostream>: sources should include this header file when using the class 
ostream class or when using classes that do both input and output.
 See section 6.4.1.
<iostream>: sources should include this header file when using the
 global stream objects (like cin and cout).
<fstream>: sources should include this header file when using the file 
stream classes. See sections 6.4.2, 6.5.2, and 6.6.3.
<sstream>: sources should include this header file when using the string 
stream classes. See sections 6.4.3 and 6.5.3.
<iomanip>: sources should include this header file when using
 parameterized manipulators. See section 6.3.2. 
 
    - badbit: illlegal operation requested at streambuf level
    - eofbif: end of file
    - failbit: operation failed at stream level
    - goodbit: when none of the above happens

    member functions:
    - copyfmt : copy format flags to current ios object
    - fill: current padding char
    - flags: return current flags
    - flags: return flags end redefine
    - precision: significant digits for floats
    - put_time: render std::tm objects
    - fmtflags: do stuff with the format flags
    - width: output width for next insertion


QUESTIONS
    1. Regarding slide 30 of Basic IO
        why is the read value reinterpret_cast<char *> and not
        reinterpret_cast<double *>?
    2. 
